from hashlib import sha256
import os
import hmac

from dotenv import load_dotenv


load_dotenv()


def hash_password(password: str) -> str:
    return sha256(password.encode()).hexdigest()


def verify_password(password: str, hashed_password: str) -> bool:
    return hash_password(password) == hashed_password


def verify_telegram_hash(received_data: dict) -> bool:
    received_hash = received_data.pop("hash")

    data_check_string = "\n".join(
        f"{key}={value}" for key, value in sorted(received_data.items())
    )

    secret_key = sha256(os.getenv("BOT_TOKEN").encode()).digest()

    expected_hash = hmac.new(secret_key, data_check_string.encode(), sha256).hexdigest()

    return hmac.compare_digest(expected_hash, received_hash)

import os
from datetime import timedelta

from authx import AuthX, AuthXConfig
from dotenv import load_dotenv
import jwt


load_dotenv()

config = AuthXConfig()
config.JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")
config.JWT_ACCESS_COOKIE_NAME = "access_token"
config.JWT_TOKEN_LOCATION = ["cookies"]
config.JWT_ALGORITHM = "HS256"
config.JWT_ACCESS_TOKEN_EXPIRES = timedelta(days=30)

security = AuthX(config)


def create_access_jwt(user_id: str) -> str:
    return security.create_access_token(uid=user_id)


def decode_access_jwt(token: str) -> dict | None:
    try:
        return jwt.decode(
            token, config.JWT_SECRET_KEY, algorithms=[config.JWT_ALGORITHM]
        )
    except:
        return None

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm.attributes import flag_modified

from app.database.models import Answer, Question


class AnswerRepository:
    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def add_answer(
        self, content: str, author_id: int, question_id: int, anonymous: bool
    ) -> Answer:
        answer = Answer(
            content=content,
            author_id=author_id,
            question_id=question_id,
            anonymous=anonymous,
        )
        self.session.add(answer)
        await self.session.flush()
        return answer

    async def answer_question(self, question_id: int, answer_id: int) -> None:
        question = await self.session.get(Question, question_id)
        question.answers_id.append(answer_id)
        flag_modified(question, "answers_id")

    async def get_answers(self, question_id: int) -> list[Answer]:
        answers = await self.session.execute(
            select(Answer).where(Answer.question_id == question_id)
        )
        answers = answers.scalars().all()
        return answers

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import joinedload

from app.database.models import Question, Tag


class QuestionsRepository:
    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def get(self, question_id: int) -> Question | None:
        return await self.session.get(Question, question_id)

    async def add(
        self, title: str, content: str, author_id: int, tags: list[str], anonymous: bool
    ) -> Question:
        question = Question(
            title=title,
            content=content,
            author_id=author_id,
            tags=tags,
            anonymous=anonymous,
        )
        self.session.add(question)
        await self.session.flush()
        return question

    async def get_n_questions_without_answer_with_offset(
        self, limit: int, offset: int
    ) -> list[Question]:
        questions = await self.session.execute(
            select(Question)
            .where(Question.without_answer == True)
            .limit(limit)
            .offset(offset)
        )
        questions = questions.scalars().all()
        return questions

    async def get_n_top_questions(self, limit: int) -> list[Question]:
        questions = await self.session.execute(
            select(Question)
            .order_by(func.char_length(Question.answers_id).desc())
            .limit(limit)
        )
        questions = questions.scalars().all()
        return questions

    async def get_all_questions(self) -> list[Question]:
        questions = await self.session.execute(select(Question))
        questions = questions.scalars().all()
        return questions

    async def get_questions_count(self) -> int:
        questions = await self.get_all_questions()
        return len(questions)


from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm.attributes import flag_modified

from app.database.models import Tag


class TagsRepo:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_tag(self, tag_name: str) -> Tag | None:
        return await self.session.get(Tag, tag_name)

    async def get_n_top_tags(self, n: int) -> list[Tag]:
        tags = await self.session.execute(
            select(Tag).order_by(Tag.questions_id.desc()).limit(n)
        )
        tags = tags.scalars().all()
        return tags

    async def add_tag(self, tag_name: str) -> None:
        tag = Tag(tag_name=tag_name)
        self.session.add(tag)

    async def add_question_id(self, tags: list[str] | None, question_id: int) -> None:
        if tags != [""]:
            for tag in tags:
                tag = await self.get_tag(tag)
                tag.questions_id.append(question_id)
                flag_modified(tag, "questions_id")

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm.attributes import flag_modified
from sqlalchemy import select, and_

from app.database.models import User, Question, Answer


class UserRepository:
    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def get(self, telegram_id: int) -> User | None:
        return await self.session.get(User, telegram_id)

    async def add(self, telegram_id: int, username: str) -> None:
        user = User(telegram_id=telegram_id, username=username)
        self.session.add(user)

    async def add_question_id(self, telegram_id: int, question_id: int) -> None:
        user = await self.get(telegram_id)
        user.questions_id.append(question_id)
        flag_modified(user, "questions_id")

    async def add_answer_id(self, user_id: int, answer_id: int) -> None:
        user = await self.get(user_id)
        user.answers_id.append(answer_id)
        flag_modified(user, "answers_id")

    async def change_name(self, user_id: int, new_name: str) -> None:
        user = await self.get(user_id)
        user.username = new_name

    async def get_user_questions(self, user_id: int):
        questions = await self.session.execute(
            select(Question).where(Question.author_id == user_id)
        )
        questions = questions.scalars().all()
        return questions

    async def get_user_answers(self, user_id: int):
        answers = await self.session.execute(
            select(Answer).where(Answer.author_id == user_id)
        )
        answers = answers.scalars().all()
        return answers

    async def get_public_user_questions(self, user_id: int):
        questions = await self.session.execute(
            select(Question).where(
                and_(Question.author_id == user_id, Question.anonymous != True)
            )
        )
        questions = questions.scalars().all()
        return questions

    async def get_public_user_answers(self, user_id: int):
        answers = await self.session.execute(
            select(Answer).where(
                and_(Answer.author_id == user_id, Answer.anonymous != True)
            )
        )
        answers = answers.scalars().all()
        return answers

import logging

from sqlalchemy.ext.asyncio import AsyncSession

from app.database.repositories.questions_repo import QuestionsRepository
from app.database.repositories.answer_repo import AnswerRepository
from app.database.repositories.user_repo import UserRepository
from app.database.repositories.tags_repo import TagsRepo
from app.database.models import Question


class QuestionsService:
    def __init__(
        self,
        questions_repo: QuestionsRepository,
        user_repo: UserRepository,
        answer_repo: AnswerRepository,
        tags_repo: TagsRepo,
        session: AsyncSession,
    ) -> None:
        self.questions_repo = questions_repo
        self.user_repo = user_repo
        self.answer_repo = answer_repo
        self.session = session
        self.tags_repo = tags_repo

    async def get_question(self, question_id: int) -> Question | None:
        return await self.questions_repo.get(question_id)

    async def add_question(
        self, title: str, content: str, author_id: int, tags: list[str], anonymous: bool
    ) -> Question:
        if not tags:
            tags = [""]
        else:
            for tag in tags:
                current_tag = await self.tags_repo.get_tag(tag)
                if not current_tag:
                    await self.tags_repo.add_tag(tag)
            await self.session.flush()

        question = await self.questions_repo.add(
            title, content, author_id, tags, anonymous
        )

        await self.tags_repo.add_question_id(tags, question.question_id)

        await self.session.commit()
        return question

    async def get_n_questions_without_answer_by_page(
        self, limit: int, page
    ) -> list[Question]:
        offset = (page - 1) * limit
        questions = (
            await self.questions_repo.get_n_questions_without_answer_with_offset(
                limit, offset
            )
        )
        return questions

    async def get_n_top_questions(self, limit: int) -> list[Question]:
        questions = await self.questions_repo.get_n_top_questions(limit)
        return questions

    async def answer_question(
        self, content: str, question_id: int, user_id: int, anonymous: bool
    ) -> None:
        try:
            answer = await self.answer_repo.add_answer(
                content, user_id, question_id, anonymous
            )
            await self.answer_repo.answer_question(question_id, answer.answer_id)
            await self.user_repo.add_answer_id(user_id, answer.answer_id)
            await self.session.commit()
        except Exception as e:
            logging.exception(e)
            await self.session.rollback()

    async def get_questions_count(self) -> int:
        return await self.questions_repo.get_questions_count()

    async def get_answers(self, question_id: int):
        return await self.answer_repo.get_answers(question_id)

from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import Tag
from app.database.repositories.tags_repo import TagsRepo


class TagsService:
    def __init__(self, tags_repo: TagsRepo, session: AsyncSession):
        self.tags_repo = tags_repo
        self.session = session

    async def get_tag(self, tag_name: str) -> Tag | None:
        return await self.tags_repo.get_tag(tag_name)

    async def get_n_top_tags(self, n: int) -> list[Tag]:
        return await self.tags_repo.get_n_top_tags(n)

    async def add_tag(self, tag_name: str) -> None:
        tag = await self.tags_repo.get_tag(tag_name)
        if not tag:
            await self.tags_repo.add_tag(tag_name)
        await self.session.commit()


from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.database.repositories.user_repo import UserRepository


class UserService:
    def __init__(self, user_repo: UserRepository, session: AsyncSession):
        self.user_repo = user_repo
        self.session = session

    async def get_user(self, telegram_id: int) -> User | None:
        return await self.user_repo.get(telegram_id)

    async def add_user(self, telegram_id: int, username: str) -> None:
        user = await self.get_user(telegram_id)
        if user:
            return
        await self.user_repo.add(telegram_id, username)
        await self.session.commit()

    async def add_question_id(self, telegram_id: int, question_id: int) -> None:
        await self.user_repo.add_question_id(telegram_id, question_id)
        await self.session.commit()

    async def add_answer_id(self, user_id: int, answer_id: int) -> None:
        await self.user_repo.add_answer_id(user_id, answer_id)
        await self.session.commit()

    async def change_name(self, user_id: int, new_name: str) -> None:
        await self.user_repo.change_name(user_id, new_name)
        await self.session.commit()

    async def get_user_questions(self, user_id: int, private: bool = False):
        if not private:
            return await self.user_repo.get_public_user_questions(user_id)
        return await self.user_repo.get_user_questions(user_id)

    async def get_user_answers(self, user_id, private: bool = False):
        if not private:
            return await self.user_repo.get_public_user_answers(user_id)
        return await self.user_repo.get_user_answers(user_id)

import os

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from dotenv import load_dotenv

from .models import Base


load_dotenv()

engine = create_async_engine(os.getenv("DATABASE_URL"))

session_factory = async_sessionmaker(engine, expire_on_commit=False)


async def init_db():
    async with engine.begin() as conn:
        # await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)

from sqlalchemy.orm import mapped_column, Mapped, DeclarativeBase
from sqlalchemy.ext.asyncio import AsyncAttrs
from sqlalchemy import JSON, BigInteger


class Base(AsyncAttrs, DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "users"

    telegram_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    username: Mapped[str]
    questions_id: Mapped[list[int]] = mapped_column(JSON, default=[])
    answers_id: Mapped[list[int]] = mapped_column(JSON, default=[])


class Question(Base):
    __tablename__ = "questions"

    question_id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    title: Mapped[str]
    content: Mapped[str]
    author_id: Mapped[int]
    without_answer: Mapped[bool] = mapped_column(default=True)
    answers_id: Mapped[list[int]] = mapped_column(JSON, default=[])
    tags: Mapped[list[str]] = mapped_column(JSON)
    anonymous: Mapped[bool]


class Answer(Base):
    __tablename__ = "answers"

    answer_id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    content: Mapped[str]
    author_id: Mapped[int]
    question_id: Mapped[int]
    likes: Mapped[list[int]] = mapped_column(JSON, default=[])
    anonymous: Mapped[bool]


class Tag(Base):
    __tablename__ = "tags"

    tag_name: Mapped[str] = mapped_column(primary_key=True)
    questions_id: Mapped[list[int]] = mapped_column(JSON, default=[])

from fastapi import Depends, Request

from app.database.repositories.user_repo import UserRepository
from app.database.services.user_service import UserService
from app.database.init_database import session_factory
from app.database.repositories.questions_repo import QuestionsRepository
from app.database.services.questions_service import QuestionsService
from app.database.repositories.answer_repo import AnswerRepository
from app.database.services.tags_service import TagsService
from app.database.repositories.tags_repo import TagsRepo
import app.auth.jwt_processing as jwt_processing


async def get_db_session():
    async with session_factory() as session:
        try:
            yield session
        finally:
            await session.close()


def get_user_service(session=Depends(get_db_session)):
    user_repo = UserRepository(session)
    return UserService(user_repo, session)


def get_tags_service(session=Depends(get_db_session)):
    tags_repo = TagsRepo(session)
    return TagsService(tags_repo, session)


def get_questions_service(session=Depends(get_db_session)):
    questions_repo = QuestionsRepository(session)
    user_repo = UserRepository(session)
    answer_repo = AnswerRepository(session)
    tags_repo = TagsRepo(session)
    return QuestionsService(questions_repo, user_repo, answer_repo, tags_repo, session)


async def get_current_user_id(request: Request):
    jwt_cookie = request.cookies.get(jwt_processing.config.JWT_ACCESS_COOKIE_NAME)
    if jwt_cookie and (jwt_payload := jwt_processing.decode_access_jwt(jwt_cookie)):
        return int(jwt_payload.get("sub"))
    return None

from datetime import datetime, timedelta, timezone
import os

from dotenv import load_dotenv
from fastapi import APIRouter, Request, Response, Query, Depends, Form
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
import app.auth.jwt_processing as jwt_processing
from app.schemas.question_schema import QuestionSchema
from app.schemas.auth_schema import TelegramAuthData
from app.schemas.answer_schema import AnswerSchema
from app.auth.hashing import verify_telegram_hash
from app.database.services.user_service import UserService
from app.database.services.questions_service import QuestionsService
from app.database.services.tags_service import TagsService
from app.dependencies.dependencies import (
    get_user_service,
    get_questions_service,
    get_current_user_id,
    get_tags_service,
)


load_dotenv()

router = APIRouter()

templates = Jinja2Templates(directory="app/templates")

bot_username = os.getenv("BOT_USERNAME")


@router.get("/")
async def index(
    request: Request,
    question_service: QuestionsService = Depends(get_questions_service),
    tags_service: TagsService = Depends(get_tags_service),
    user_service: UserService = Depends(get_user_service),
    user_id: int | None = Depends(get_current_user_id),
):
    query_params = request.query_params
    try:
        page = int(query_params.get("page", 1))
        page = max(page, 1)
    except ValueError:
        page = 1

    questions = await question_service.get_n_questions_without_answer_by_page(8, page)

    top_questions = await question_service.get_n_top_questions(5)
    questions_count = await question_service.get_questions_count()
    top_tags = await tags_service.get_n_top_tags(7)

    user = await user_service.get_user(user_id)

    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "user": user,
            "questions": questions,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "questions_count": questions_count,
            "page": page,
            "bot_username": bot_username,
        },
    )


@router.get("/profile/{user_id}/")
async def profile(
    user_id,
    request: Request,
    current_user_id: int | None = Depends(get_current_user_id),
    user_service: UserService = Depends(get_user_service),
    questions_service: QuestionsService = Depends(get_questions_service),
    tags_service: TagsService = Depends(get_tags_service),
):
    top_questions = await questions_service.get_n_top_questions(5)
    questions_count = await questions_service.get_questions_count()
    top_tags = await tags_service.get_n_top_tags(7)

    user = await user_service.get_user(user_id)

    current_user = await user_service.get_user(current_user_id)

    is_private = user_id.isdigit() and int(user_id) == current_user_id
    user_questions = await user_service.get_user_questions(user_id, is_private)
    user_answers = await user_service.get_user_answers(user_id, is_private)

    response = templates.TemplateResponse(
        "profile.html",
        {
            "request": request,
            "user": current_user,
            "profile_user": user,
            "user_questions": user_questions,
            "user_answers": user_answers,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "questions_count": questions_count,
            "user_questions_count": len(user_questions),
            "answers_count": len(user_answers),
            "bot_username": bot_username,
        },
    )

    print(type(current_user_id), type(user_id))

    return response


@router.get("/ask/")
async def ask(
    request: Request,
    user_id: int | None = Depends(get_current_user_id),
    user_service: UserService = Depends(get_user_service),
    question_service: QuestionsService = Depends(get_questions_service),
    tags_service: TagsService = Depends(get_tags_service),
):
    if not user_id:
        return RedirectResponse("/")  # TODO: redirect to login page

    user = await user_service.get_user(user_id)

    top_questions = await question_service.get_n_top_questions(5)
    questions_count = await question_service.get_questions_count()
    top_tags = await tags_service.get_n_top_tags(7)

    response = templates.TemplateResponse(
        "ask.html",
        {
            "request": request,
            "user": user,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "questions_count": questions_count,
            "bot_username": bot_username,
        },
    )
    return response


@router.get("/question/{question_id}/")
async def question(
    question_id,
    request: Request,
    question_service: QuestionsService = Depends(get_questions_service),
    user_service: UserService = Depends(get_user_service),
    tags_service: TagsService = Depends(get_tags_service),
    user_id: int | None = Depends(get_current_user_id),
):
    question = await question_service.get_question(question_id)

    top_questions = await question_service.get_n_top_questions(2)
    top_tags = await tags_service.get_n_top_tags(7)
    questions_count = await question_service.get_questions_count()

    answers = await question_service.get_answers(question_id)
    user = await user_service.get_user(user_id)

    if not question:
        response = templates.TemplateResponse(
            "page404.html", {"request": request, "user": user}
        )
        return response

    response = templates.TemplateResponse(
        "question.html",
        {
            "request": request,
            "user": user,
            "question": question,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "answers": answers,
            "questions_count": questions_count,
            "answers_count": len(answers),
            "bot_username": bot_username,
        },
    )
    return response


@router.get("/rules/")
async def rules(
    request: Request,
    user_id: int | None = Depends(get_current_user_id),
    user_service: UserService = Depends(get_user_service),
    question_service: QuestionsService = Depends(get_questions_service),
    tags_service: TagsService = Depends(get_tags_service),
):
    user = await user_service.get_user(user_id)

    top_questions = await question_service.get_n_top_questions(5)
    questions_count = await question_service.get_questions_count()
    top_tags = await tags_service.get_n_top_tags(7)

    response = templates.TemplateResponse(
        "rules.html",
        {
            "request": request,
            "user": user,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "questions_count": questions_count,
            "bot_username": bot_username,
        },
    )
    return response


@router.get("/about/")  # TODO: more info
async def rules(
    request: Request,
    user_id: int | None = Depends(get_current_user_id),
    user_service: UserService = Depends(get_user_service),
    question_service: QuestionsService = Depends(get_questions_service),
    tags_service: TagsService = Depends(get_tags_service),
):
    user = await user_service.get_user(user_id)

    top_questions = await question_service.get_n_top_questions(5)
    questions_count = await question_service.get_questions_count()
    top_tags = await tags_service.get_n_top_tags(7)

    response = templates.TemplateResponse(
        "about.html",
        {
            "request": request,
            "user": user,
            "top_questions": top_questions,
            "top_tags": top_tags,
            "questions_count": questions_count,
            "bot_username": bot_username,
        },
    )
    return response


@router.post("/question/")
async def question(
    question: QuestionSchema = Form(),
    question_service: QuestionsService = Depends(get_questions_service),
    user_service: UserService = Depends(get_user_service),
    user_id: int = Depends(get_current_user_id),
):
    if not user_id:
        return Response(status_code=401)

    added_question = await question_service.add_question(
        question.title, question.content, user_id, question.tags, question.anonymous
    )  # TODO add anonymous field
    await user_service.add_question_id(user_id, added_question.question_id)

    return RedirectResponse(f"/question/{added_question.question_id}/", status_code=303)


@router.post("/question/{question_id}/answer")
async def answer_question(
    question_id: int,
    answer_data: AnswerSchema = Form(),
    question_service: QuestionsService = Depends(get_questions_service),
    user_id: int = Depends(get_current_user_id),
):
    if not user_id:
        return Response(status_code=401)

    response = RedirectResponse(f"/question/{question_id}/", status_code=303)

    if answer_data.content.strip() == "":
        return response

    await question_service.answer_question(
        answer_data.content, question_id, user_id, answer_data.anonymous
    )

    return response


@router.post("/change/name/")
async def change_name(
    new_name: str = Form(max_length=20),
    user_id: int = Depends(get_current_user_id),
    user_service: UserService = Depends(get_user_service),
):
    if not user_id:
        return Response(status_code=401)

    await user_service.change_name(user_id, new_name)
    return RedirectResponse(f"/profile/{user_id}/", status_code=303)


@router.get("/auth/telegram/")
async def auth_telegram(
    telegram_data: TelegramAuthData = Query(),
    user_service: UserService = Depends(get_user_service),
    user_id: int = Depends(get_current_user_id),
):
    if user_id:
        return Response(status_code=400)

    is_valid = verify_telegram_hash(received_data=telegram_data.model_dump())
    if not is_valid:
        return Response(status_code=400)

    await user_service.add_user(telegram_data.id, telegram_data.first_name)

    response = RedirectResponse("/")
    response.set_cookie(
        key=jwt_processing.config.JWT_ACCESS_COOKIE_NAME,
        value=jwt_processing.create_access_jwt(user_id=str(telegram_data.id)),
        expires=datetime.now(timezone.utc) + timedelta(days=30),
        httponly=True,
        secure=False,  # TODO: change to True in production
        samesite="lax",
    )
    return response


@router.get("/logout/")
async def logout():
    response = RedirectResponse("/")
    response.delete_cookie(jwt_processing.config.JWT_ACCESS_COOKIE_NAME)
    return response


"""TEST"""


@router.get("/login/")
async def login(user_service: UserService = Depends(get_user_service)):
    response = RedirectResponse("/")
    response.set_cookie(
        key=jwt_processing.config.JWT_ACCESS_COOKIE_NAME,
        value=jwt_processing.create_access_jwt(user_id="7234443454297302"),
        expires=datetime.now(timezone.utc) + timedelta(days=100),
        httponly=True,
        secure=False,
        samesite="lax",
    )
    await user_service.add_user("7234443454297302", "sdf")
    return response


@router.get("/{path:path}/")
async def not_found(
    request: Request,
    user_service: UserService = Depends(get_user_service),
    user_id: int | None = Depends(get_current_user_id),
):
    user = await user_service.get_user(user_id)
    response = templates.TemplateResponse(
        "page404.html", {"request": request, "user": user}
    )
    return response

from pydantic import BaseModel, Field
from typing import List


class QuestionSchema(BaseModel):
    title: str = Field(max_length=200)
    content: str = Field(min_length=10, max_length=5000)
    anonymous: bool = False
    tags: List[str] = Field(default=[], max_length=5)

from pydantic import BaseModel, Field
from typing import List


class QuestionSchema(BaseModel):
    title: str = Field(max_length=200)
    content: str = Field(min_length=10, max_length=5000)
    anonymous: bool = False
    tags: List[str] = Field(default=[], max_length=5)

<footer class="fixed bottom-0 left-4 right-4 mx-auto max-w-7xl rounded-xl shadow-md border border-gray-250 p-4 bg-gray-50/90 backdrop-blur-sm z-40">
    <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row justify-between items-center">
            <div class="flex flex-wrap justify-center gap-4 md:gap-8">
                <a href="/" class="text-gray-600 hover:text-indigo-600 transition">Главная</a>
                <a href="/about" class="text-gray-600 hover:text-indigo-600 transition">О нас</a>
                <a href="/rules" class="text-gray-600 hover:text-indigo-600 transition">Правила</a>
                {% if user %}
                    <a href="/profile/{{ user.telegram_id }}" class="text-gray-600 hover:text-indigo-600 transition">Профиль</a>
                {% endif %}
            </div>
        </div>

        <div class="mt-4 pt-4 border-t border-gray-100 text-center text-sm text-gray-500 md:text-right">
            © 2025 Cleverly
        </div>
    </div>
</footer>

<header class="header-glass fixed top-4 left-4 right-4 mx-auto max-w-7xl rounded-xl shadow-md z-50 border border-gray-250 p-4 bg-gray-50/90 backdrop-blur-sm">
    <div class="flex items-center justify-between">
        <!-- Логотип -->
        <a href="/" class="flex items-center space-x-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
            </svg>
            <h1 class="text-2xl font-bold gradient-text">Cleverly</h1>
        </a>

        <!-- Пользователь / Вход -->
        <div class="flex items-center space-x-4">
            {% if user %}
                <!-- Ссылка на профиль -->
                <a href="/profile/{{ user.telegram_id }}" class="flex items-center space-x-2">
                    <div class="h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center">
                        <span class="text-indigo-600 font-medium">{{ user.username|first|upper }}</span>
                    </div>
                </a>

                <!-- Кнопка выхода с текстом -->
                <a href="/logout" class="px-4 py-2 bg-red-100 hover:bg-red-200 text-red-600 hover:text-red-800 transition-all duration-200 rounded-lg flex items-center group">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                    Выход
                </a>
            {% else %}
                <!-- Telegram вход -->
                <script async src="https://telegram.org/js/telegram-widget.js?22"
                    data-telegram-login="{{ bot_username }}"
                    data-size="large"
                    data-userpic="false"
                    data-auth-url="/auth/telegram"
                    data-request-access="write">
                </script>
            {% endif %}
        </div>
    </div>
</header>
<!-- templates/partials/stats_sidebar.html -->
<aside class="lg:w-1/4">
    <div class="bg-white rounded-xl shadow-sm p-6 sticky top-28">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Популярные теги</h2>
        <div class="flex flex-wrap gap-2">
            {% for tag in top_tags %}
            <a href="#" class="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm hover:bg-indigo-100 hover:text-indigo-600 transition">{{ tag.tag_name }}</a>
            {% endfor %}
        </div>
        <div class="mt-8">
            <h2 class="text-xl font-bold text-gray-800 mb-4">Статистика</h2>
            <div class="space-y-3">
                <div class="flex justify-between items-center">
                    <span class="text-gray-600">Всего вопросов</span>
                    <span class="font-medium">{{ questions_count }}</span>
                </div>
            </div>
        </div>
    </div>
</aside>
<!-- templates/partials/top_questions.html -->
<aside class="lg:w-1/4">
    <div class="bg-white rounded-xl shadow-sm p-6 sticky top-28">
        <h2 class="text-xl font-bold text-gray-800 mb-6 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
            </svg>
            Топ вопросов
        </h2>

        <div class="space-y-4">
            {% for question in top_questions %}
                <div class="group py-3 border-t border-gray-100 pt-4 first:border-t-0 first:pt-0">
                    <a href="/question/{{ question.question_id }}" class="block">
                        <h3 class="font-medium text-gray-800 group-hover:text-indigo-600 transition line-clamp-1">{{ question.title }}</h3>
                        <p class="text-sm text-gray-500 mt-1 line-clamp-2">{{ question.content }}</p>
                        <div class="flex items-center mt-2 text-xs text-gray-400">
                            <span>Автор:</span>
                            {% if question.anonymous %}
                                <span class="ml-1 text-gray-500">Аноним</span>
                            {% else %}
                                <a href="/profile/{{ question.author_id }}" class="ml-1 text-indigo-500 hover:underline truncate max-w-[120px] sm:max-w-none">{{ question.author_id }}</a>
                            {% endif %}
                        </div>
                    </a>
                </div>
            {% endfor %}
        </div>
    </div>
</aside>
<!-- templates/about.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>О нас - Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-20 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Main Content - About Us -->
            <div class="lg:w-2/4">
                <div class="bg-white rounded-xl shadow-sm p-8 mb-8">
                    <h1 class="text-3xl font-bold text-gray-800 mb-6">О проекте Cleverly</h1>
                    <p class="text-gray-600 leading-relaxed mb-4">
                        Cleverly — это платформа вопросов и ответов, созданная с целью собрать вместе людей, которые хотят делиться знаниями, помогать другим и находить решения.
                    </p>
                    <p class="text-gray-600 leading-relaxed mb-4">
                        Мы верим, что лучшие идеи рождаются в сообществе. Наш сайт позволяет задавать вопросы, отвечать на них и получать полезную информацию из разных областей — от программирования до искусства.
                    </p>
                    <p class="text-gray-600 leading-relaxed">
                        Cleverly поддерживает анонимность, чтобы каждый мог чувствовать себя комфортно при обсуждении любых тем. Здесь нет рекламы, только чистое содержание и уважение к пользователям.
                    </p>
                </div>

                <!-- Импорт статистики -->
                <div class="bg-white rounded-xl shadow-sm p-6">
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Статистика сайта</h2>
                    <p class="text-gray-600 mb-4">Мы гордимся нашим растущим сообществом:</p>
                    <ul class="space-y-3">
                        <li class="flex justify-between border-b border-gray-100 pb-2">
                            <span class="text-gray-600">Всего вопросов:</span>
                            <span class="font-medium">{{ questions_count }}</span>
                        </li>
                        <li class="flex justify-between border-b border-gray-100 pb-2">
                            <span class="text-gray-600">Всего пользователей:</span>
                            <span class="font-medium">{{ users_count }}</span>
                        </li>
                        <li class="flex justify-between border-b border-gray-100 pb-2">
                            <span class="text-gray-600">Активных тегов:</span>
                            <span class="font-medium">{{ tags_count }}</span>
                        </li>
                        <li class="flex justify-between pb-2">
                            <span class="text-gray-600">Среднее кол-во ответов:</span>
                            <span class="font-medium">{{ avg_answers_per_question }}</span>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}
            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}
</body>
</html>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Задать вопрос - Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-24 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}
            
            <!-- Main Content - Question Form -->
            <div class="lg:w-2/4">
                <div class="mb-6">
                    <h2 class="text-xl font-bold text-gray-800">Задать новый вопрос</h2>
                    <p class="text-gray-500 mt-1">Поделитесь своей проблемой и получите ответы от сообщества</p>
                </div>
                <form id="question-form" class="bg-white rounded-xl shadow-sm p-6" method="post" action="/question">
                    <div class="mb-6">
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Название вопроса</label>
                        <input type="text" id="title" name="title" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Кратко сформулируйте вопрос" required>
                    </div>
                    <div class="mb-6">
                        <label for="content" class="block text-sm font-medium text-gray-700 mb-1">Подробное описание</label>
                        <textarea id="content" name="content" rows="6" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Опишите проблему максимально подробно..." required></textarea>
                    </div>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Теги (максимум 5)</label>
                        <div class="flex flex-wrap items-center gap-2 mb-2" id="tags-container">
                            <button type="button" id="add-tag-btn" class="flex items-center justify-center w-8 h-8 rounded-full bg-indigo-100 text-indigo-600 hover:bg-indigo-200 transition">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                            </button>
                        </div>
                        <div class="relative hidden" id="tag-input-container">
                            <input type="text" id="tag-input" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Введите тег...">
                            <div id="tag-suggestions" class="hidden absolute z-10 mt-1 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-60 overflow-auto"></div>
                        </div>
                        <p class="mt-1 text-xs text-gray-500">Нажмите + чтобы добавить тег</p>
                    </div>
                    <div class="mb-6 flex items-center">
                        <input type="checkbox" id="anonymous" name="anonymous" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                        <label for="anonymous" class="ml-2 block text-sm text-gray-700">Опубликовать анонимно</label>
                    </div>
                    <!-- Hidden container for tags -->
                    <div id="tags-hidden-inputs"></div>
                    <div class="flex justify-end">
                        <button type="submit" class="px-6 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                            </svg>
                            Опубликовать вопрос
                        </button>
                    </div>
                </form>
            </div>

            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tagInput = document.getElementById('tag-input');
            const tagInputContainer = document.getElementById('tag-input-container');
            const tagsContainer = document.getElementById('tags-container');
            const addTagBtn = document.getElementById('add-tag-btn');
            const tagSuggestions = document.getElementById('tag-suggestions');
            const maxTags = 5;
            let selectedTags = [];
            const allTags = [
                'программирование', 'технологии', 'образование', 'наука', 'бизнес',
                'математика', 'физика', 'история', 'искусство', 'дизайн',
                'маркетинг', 'стартапы', 'аналитика', 'данные', 'алгоритмы',
                'веб-разработка', 'мобильная разработка', 'искусственный интеллект',
                'машинное обучение', 'нейросети', 'кибербезопасность', 'блокчейн'
            ];

            // Add tag button click handler
            addTagBtn.addEventListener('click', function() {
                tagInputContainer.classList.remove('hidden');
                tagInput.focus();
                addTagBtn.classList.add('hidden');
            });

            // Tag input handler
            tagInput.addEventListener('input', function() {
                const input = this.value.trim().toLowerCase();
                if (input.length > 1) {
                    const filtered = allTags.filter(tag => 
                        tag.toLowerCase().includes(input) && 
                        !selectedTags.includes(tag)
                    );
                    showSuggestions(filtered);
                } else {
                    hideSuggestions();
                }
            });

            // Tag input keydown handler
            tagInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const tag = this.value.trim();
                    if (tag && !selectedTags.includes(tag)) {
                        addTag(tag);
                        this.value = '';
                        hideSuggestions();
                    }
                }
            });

            // Show tag suggestions
            function showSuggestions(tags) {
                if (tags.length === 0) {
                    tagSuggestions.innerHTML = '<div class="p-2 text-gray-500">Нет подходящих тегов</div>';
                } else {
                    tagSuggestions.innerHTML = tags.map(tag => `
                        <div class="p-2 hover:bg-indigo-50 cursor-pointer" data-tag="${tag}">${tag}</div>
                    `).join('');
                }
                tagSuggestions.classList.remove('hidden');
            }

            // Hide suggestions
            function hideSuggestions() {
                tagSuggestions.classList.add('hidden');
            }

            // Click on suggestion
            tagSuggestions.addEventListener('click', function(e) {
                if (e.target.dataset.tag) {
                    addTag(e.target.dataset.tag);
                    tagInput.value = '';
                    hideSuggestions();
                }
            });

            // Add tag function
            function addTag(tag) {
                if (selectedTags.length >= maxTags) return;
                if (tag && !selectedTags.includes(tag)) {
                    selectedTags.push(tag);
                    renderTags();
                }
            }

            // Remove tag function
            function removeTag(tag) {
                selectedTags = selectedTags.filter(t => t !== tag);
                renderTags();
            }

            // Render tags function
            function renderTags() {
                tagsContainer.innerHTML = selectedTags.map(tag => `
                    <div class="flex items-center bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm">
                        ${tag}
                        <button type="button" class="ml-1 text-indigo-600 hover:text-indigo-800" data-tag="${tag}">
                            &times;
                        </button>
                    </div>
                `).join('');
                if (selectedTags.length < maxTags) {
                    const addBtn = `
                        <button type="button" id="add-tag-btn" class="flex items-center justify-center w-8 h-8 rounded-full bg-indigo-100 text-indigo-600 hover:bg-indigo-200 transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                        </button>
                    `;
                    tagsContainer.innerHTML += addBtn;
                    document.getElementById('add-tag-btn').addEventListener('click', function() {
                        tagInputContainer.classList.remove('hidden');
                        tagInput.focus();
                        this.classList.add('hidden');
                    });
                }
                // Add event listeners to remove buttons
                document.querySelectorAll('#tags-container button[data-tag]').forEach(btn => {
                    btn.addEventListener('click', function(e) {
                        e.preventDefault();
                        removeTag(this.dataset.tag);
                    });
                });
            }

            // Form submit handler with validation
            document.getElementById('question-form').addEventListener('submit', function(e) {
                const title = document.getElementById('title').value.trim();
                const content = document.getElementById('content').value.trim();

                // Сброс предыдущих ошибок
                document.querySelectorAll('.error-message').forEach(el => el.remove());
                document.querySelectorAll('input, textarea').forEach(el => el.classList.remove('border-red-500'));

                let isValid = true;

                // Проверка заголовка
                if (!title) {
                    e.preventDefault();
                    isValid = false;
                    const error = document.createElement('div');
                    error.className = 'text-red-500 text-sm mt-1 error-message';
                    error.textContent = 'Заголовок не может быть пустым.';
                    document.getElementById('title').parentNode.appendChild(error);
                    document.getElementById('title').classList.add('border-red-500');
                } else if (title.length > 200) {
                    e.preventDefault();
                    isValid = false;
                    const error = document.createElement('div');
                    error.className = 'text-red-500 text-sm mt-1 error-message';
                    error.textContent = 'Заголовок не должен превышать 200 символов.';
                    document.getElementById('title').parentNode.appendChild(error);
                    document.getElementById('title').classList.add('border-red-500');
                }

                // Проверка содержания
                if (!content) {
                    e.preventDefault();
                    isValid = false;
                    const error = document.createElement('div');
                    error.className = 'text-red-500 text-sm mt-1 error-message';
                    error.textContent = 'Содержание не может быть пустым.';
                    document.getElementById('content').parentNode.appendChild(error);
                    document.getElementById('content').classList.add('border-red-500');
                } else if (content.length < 10 || content.length > 5000) {
                    e.preventDefault();
                    isValid = false;
                    const error = document.createElement('div');
                    error.className = 'text-red-500 text-sm mt-1 error-message';
                    error.textContent = 'Описание должно содержать от 10 до 5000 символов.';
                    document.getElementById('content').parentNode.appendChild(error);
                    document.getElementById('content').classList.add('border-red-500');
                }

                // Если всё валидно — готовим теги и отправляем
                if (isValid) {
                    const tagsHiddenContainer = document.getElementById('tags-hidden-inputs');
                    tagsHiddenContainer.innerHTML = '';
                    selectedTags.forEach(tag => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'tags';
                        input.value = tag;
                        tagsHiddenContainer.appendChild(input);
                    });
                    // Форма будет отправлена автоматически
                } else {
                    e.preventDefault(); // Блокируем отправку, если есть ошибки
                }
            });

            // Close suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!tagInput.contains(e.target) && !tagSuggestions.contains(e.target)) {
                    hideSuggestions();
                }
            });
        });
    </script>
</body>
</html>
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cleverly - Q&A Platform</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .question-card {
            transition: all 0.3s ease;
        }
        .question-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-24 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}

            <!-- Main Feed -->
            <div class="lg:w-2/4">
                <div class="mb-6 flex items-center justify-between">
                    <h2 class="text-xl font-bold text-gray-800">Актуальные вопросы</h2>
                    <a href="/ask" class="px-4 py-2 bg-indigo-600 text-white rounded-lg text-sm font-medium hover:bg-indigo-700 transition flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Задать вопрос
                    </a>
                </div>
                <div class="space-y-4">
                    {% if questions %}
                        {% for question in questions %}
                        <div class="question-card bg-white rounded-xl shadow-sm p-6 hover:shadow-md truncate">
                            <div class="flex justify-between items-start truncate">
                                <div class="">
                                    <a href="/question/{{ question.question_id }}" class="block">
                                        <h3 class="text-lg font-semibold text-gray-800 hover:text-indigo-600 transition max-w-xl">
                                            {{ question.title }}
                                        </h3>
                                        <p class="text-gray-600 mt-2 line-clamp-2 max-w-xl overflow-hidden">
                                            {{ question.content }}
                                        </p>
                                    </a>
                                    <div class="mt-4 flex items-center space-x-4 text-sm">
                                        <a href="{% if not question.anonymous %}/profile/{{ question.author_id }}{% else %}#{% endif %}" 
                                        class="flex items-center text-gray-500 hover:text-indigo-600 transition">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                            </svg>
                                            {% if question.anonymous %}Аноним{% else %}Автор{% endif %}
                                        </a>
                                        <a href="/question/{{ question.question_id }}" class="flex items-center text-gray-500 hover:text-indigo-600 transition">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                            </svg>
                                            Ответить
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    {% else %}
                        <div class="bg-white rounded-xl shadow-sm p-6 text-center">
                            <p class="text-gray-600">Вопросы не найдены</p>
                        </div>
                    {% endif %}
                </div>

                <!-- Pagination -->
                <div class="mt-8 flex justify-center">
                    <nav class="flex items-center space-x-2">
                        {% if page > 1 %}
                        <a href="/?page={{ page - 1 }}" class="p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </a>
                        {% else %}
                        <span class="p-2 rounded-lg bg-gray-100 text-gray-400 cursor-not-allowed">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </span>
                        {% endif %}
                        <a href="/?page={{ page + 1 }}" class="p-2 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </a>
                    </nav>
                </div>
            </div>

            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Cleverly Q&A platform loaded');
        });
    </script>
</body>
</html>
<!-- templates/404.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Страница не найдена | Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass, .footer-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
        .animate-bounce-slow {
            animation: bounce 4s infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 py-20 flex items-center justify-center">
        <div class="text-center">
            <div class="inline-block mb-6 relative">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20 text-indigo-600 animate-bounce-slow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                        d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
                <span class="absolute -bottom-2 -right-2 bg-red-500 text-white rounded-full h-8 w-8 flex items-center justify-center text-sm">!</span>
            </div>

            <h1 class="text-5xl font-bold text-gray-800 mt-6">404</h1>
            <p class="mt-4 text-xl text-gray-600">Страница не найдена</p>
            <p class="mt-2 text-gray-500">Кажется, вы заблудились...</p>

            <div class="mt-8">
                <a href="/" class="px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition shadow-md hover:shadow-lg inline-flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m2-9a1 1 0 00-1-1h-6a1 1 0 00-1 1v4a1 1 0 001 1h6a1 1 0 001-1V6z" />
                    </svg>
                    На главную
                </a>
            </div>
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}
</body>
</html>
<!-- templates/profile.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Профиль {{ profile_user.username if profile_user else 'не найден' }} - Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script>       
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245);  
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .question-card {
            transition: all 0.3s ease;
        }
        .question-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
        .horizontal-scroll {
            display: flex;
            overflow-x: auto;
            scroll-behavior: smooth;
            padding-bottom: 1rem;
        }
        .horizontal-scroll::-webkit-scrollbar {
            height: 6px;
        }
        .horizontal-scroll::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-24 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}
            
            <!-- Main Content - Profile -->
            <div class="lg:w-2/4">
                {% if profile_user %}
                    <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
                        <div class="flex flex-col sm:flex-row gap-4">
                            <h2 class="text-2xl font-bold text-gray-800 truncate max-w-xs sm:max-w-sm md:max-w-md">
                                {{ profile_user.username }}
                            </h2>

                            {% if profile_user.telegram_id == user.telegram_id %}
                            <form action="/change/name" method="POST" class="w-full sm:w-auto">
                                <div class="flex flex-col sm:flex-row sm:items-center gap-3">
                                    <input type="text" name="new_name" placeholder="Новое имя" required maxlength="20"
                                            class="px-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 w-full truncate">

                                    <button type="submit" class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700 transition whitespace-nowrap">
                                        Изменить имя
                                    </button>
                                </div>
                            </form>
                            {% endif %}
                        </div>
                    </div>
                    
                    <!-- Вопросы пользователя -->
                    <div class="mb-8">
                        <h3 class="text-xl font-bold text-gray-800 mb-4">Заданные вопросы ({{ user_questions_count }})</h3>
                        {% if user_questions %}
                            <div class="horizontal-scroll">
                                {% for q in user_questions %}
                                    {% if not q.anonymous or (user and user.telegram_id == profile_user.telegram_id) %}
                                        <a href="/question/{{ q.question_id }}" class="flex-shrink-0 w-64 bg-white rounded-xl shadow-sm p-4 mr-4 hover:shadow-md transition">
                                            <h4 class="font-semibold text-gray-800 truncate">{{ q.title }}</h4>
                                            <p class="text-gray-600 text-sm mt-1 line-clamp-2">{{ q.content }}</p>
                                            <div class="mt-2 text-xs text-gray-500">
                                                {% if q.anonymous %}Аноним{% else %}Автор{% endif %}
                                            </div>
                                        </a>
                                    {% endif %}
                                {% endfor %}
                            </div>
                        {% else %}
                            <p class="text-gray-500">Пользователь пока не задал ни одного вопроса.</p>
                        {% endif %}
                    </div>
                    
                    <!-- Ответы пользователя -->
                    <div>
                        <h3 class="text-xl font-bold text-gray-800 mb-4">Данные ответы ({{ answers_count }})</h3>
                        {% if user_answers %}
                            <div class="horizontal-scroll">
                                {% for a in user_answers %}
                                    {% if not a.anonymous or (user and user.telegram_id == profile_user.telegram_id) %}
                                        <a href="/question/{{ a.question_id }}" class="flex-shrink-0 w-64 bg-white rounded-xl shadow-sm p-4 mr-4 hover:shadow-md transition">
                                            <h4 class="font-semibold text-gray-800 truncate">Ответ на #{{ a.question_id }}</h4>
                                            <p class="text-gray-600 text-sm mt-1 line-clamp-3">{{ a.content }}</p>
                                            <div class="mt-2 text-xs text-gray-500">
                                                {% if a.anonymous %}Анонимный ответ{% else %}Автор{% endif %}
                                            </div>
                                        </a>
                                    {% endif %}
                                {% endfor %}
                            </div>
                        {% else %}
                            <p class="text-gray-500">Пользователь пока не дал ни одного ответа.</p>
                        {% endif %}
                    </div>
                {% else %}
                    <div class="bg-white rounded-xl shadow-sm p-6 mb-8 text-center">
                        <h2 class="text-2xl font-bold text-gray-800 mb-4">Профиль не найден</h2>
                        <p class="text-gray-600 mb-6">Пользователь с таким ID не найден.</p>
                        <a href="/" class="inline-block px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition">
                            Вернуться на главную
                        </a>
                    </div>
                {% endif %}
            </div>

            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}
</body>
</html>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ question.title }} - Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script>     
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .question-card {
            transition: all 0.3s ease;
        }
        .question-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6); 
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
        /* Ограничение высоты текста */
        .line-clamp-5 {
            display: -webkit-box;
            -webkit-box-orient: vertical;
            overflow: hidden;
            word-break: break-all;
        }
        .expanded {
            white-space: pre-wrap;
            overflow: visible;
            height: auto;
        }

        button[disabled] {
            opacity: 0.6;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-24 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}
            
            <!-- Main Content - Question Details -->
            <div class="lg:w-2/4">
                <!-- Заголовок вопроса -->
                <div class="mb-6">
                    <h2 class="text-xl font-bold text-gray-800">{{ question.title }}</h2>
                    <!-- Блок с тегами вопроса -->
                    {% if question.tags %}
                    <div class="mt-3 flex flex-wrap gap-2">
                        {% for tag in question.tags %}
                        {% if tag != '' %}
                        <a href="#" class="px-3 py-1 bg-gray-300 text-gray-800 rounded-full text-sm hover:bg-indigo-100 hover:text-indigo-600 transition">{{ tag }}</a>
                        {% endif %}
                        {% endfor %}
                    </div>
                    {% endif %}
                </div>
                
                <!-- Вопрос -->
                <div class="question-card bg-white rounded-xl shadow-sm p-6 mb-8">
                    <h3 class="text-lg font-semibold text-gray-800">{{ question.title }}</h3>
                    <p class="text-gray-600 mt-4 whitespace-pre-wrap">{{ question.content }}</p>
                    <div class="mt-6 flex items-center text-sm text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        {% if question.anonymous %}
                            Аноним
                        {% else %}
                            <a href="/profile/{{ question.author_id }}" class="hover:text-indigo-600 transition">{{ question.author_id }}</a>
                        {% endif %}
                    </div>
                </div>
                
                <!-- Форма ответа -->
                {% if user %}
                <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Оставить ответ</h3>
                    <form action="/question/{{ question.question_id }}/answer" method="POST" onsubmit="return validateAnswer()">
                        <textarea 
                            name="content" 
                            rows="4" 
                            maxlength="10000"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none" 
                            placeholder="Введите ваш ответ..." 
                            required>
                        </textarea>
                        <div class="mt-4 flex items-center">
                            <input type="checkbox" id="anonymous" name="anonymous" class="mr-2">
                            <label for="anonymous" class="text-sm text-gray-600">Ответить анонимно</label>
                        </div>
                        <button type="submit" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition" disabled>
                            Отправить ответ
                        </button>
                    </form>
                </div>
                {% else %}
                <div class="bg-white rounded-xl shadow-sm p-6 mb-8 text-center">
                    <p class="text-gray-600">Чтобы оставить ответ, войдите через Telegram.</p>
                </div>
                {% endif %}
                
                <!-- Блок с ответами -->
                <div class="mt-10">
                    <h3 class="text-xl font-bold text-gray-800 mb-6">Ответы ({{ answers_count }})</h3>
                    {% if answers %}
                        <div class="space-y-6">
                            {% for answer in answers %}
                                <div class="bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition">
                                    <p class="text-gray-600 line-clamp-5" data-max-lines="5">{{ answer.content }}</p>
                                    <div class="mt-4 flex items-center justify-between">
                                        <div class="flex items-center text-sm text-gray-500">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                            </svg>
                                            {% if answer.anonymous %}
                                                Аноним
                                            {% else %}
                                                <a href="/profile/{{ answer.author_id }}" class="hover:text-indigo-600 transition">{{ answer.author_id }}</a>
                                            {% endif %}
                                        </div>
                                        <button onclick="toggleAnswer(this)" class="text-xs text-indigo-600 hover:text-indigo-800 underline hidden">Показать полностью</button>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="bg-white rounded-xl shadow-sm p-6 text-center">
                            <p class="text-gray-600">Пока нет ответов.</p>
                        </div>
                    {% endif %}
                </div>
            </div>

            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}

    <script>
        document.querySelector('textarea').value = ''
        function toggleAnswer(button) {
            const container = button.parentElement.parentElement;
            const textEl = container.querySelector("p");
            const isExpanded = textEl.classList.contains("expanded");
            if (isExpanded) {
                textEl.classList.remove("expanded");
                textEl.classList.add("line-clamp-5");
                button.textContent = "Показать полностью";
            } else {
                textEl.classList.remove("line-clamp-5");
                textEl.classList.add("expanded");
                button.textContent = "Скрыть";
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Проверка для показа кнопки "Показать полностью"
            document.querySelectorAll(".line-clamp-5").forEach(el => {
                const parentButton = el.closest(".bg-white").querySelector("button[onclick]");
                const lineHeight = 20;
                const lines = el.scrollHeight / lineHeight;
                const maxLines = parseInt(el.getAttribute("data-max-lines")) || 5;

                if (lines > maxLines) {
                    parentButton.classList.remove("hidden");
                }
            });

            // Валидация формы: запрет отправки пустого ответа
            const textarea = document.querySelector('textarea[name="content"]');
            const submitBtn = document.querySelector('button[type="submit"]');

            if (textarea && submitBtn) {
                textarea.addEventListener("input", function () {
                    if (textarea.value.trim() === "") {
                        submitBtn.disabled = true;
                    } else {
                        submitBtn.disabled = false;
                    }
                });
            }
        });

        function validateAnswer() {
            const textarea = document.querySelector('textarea[name="content"]');
            const value = textarea.value;

            if (!value || value.trim().length === 0) {
                alert("Пожалуйста, введите текст ответа.");
                textarea.focus();
                return false;
            }

            return true;
        }
    </script>
</body>
</html>
<!-- templates/rules.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Правила - Cleverly</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color:rgb(245, 245, 245); 
        }
        .header-glass {
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
        }
        .gradient-text {
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col pb-20 pt-5">

    <!-- Header -->
    {% include "partials/header.html" %}

    <!-- Main Content -->
    <main class="flex-grow container mx-auto max-w-7xl px-4 pt-24 pb-12">
        <div class="flex flex-col lg:flex-row gap-8">
            
            <!-- Main Content - Rules -->
            <div class="lg:w-2/4">
                <div class="bg-white rounded-xl shadow-sm p-8 mb-8">
                    <h1 class="text-3xl font-bold text-gray-800 mb-6">Правила использования</h1>

                    <section class="mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-3">1. Уважайте других участников</h2>
                        <p class="text-gray-600 leading-relaxed">
                            Наши пользователи — основа сообщества. Взаимоотношения между участниками должны строиться на взаимном уважении и доброжелательности.
                        </p>
                    </section>

                    <section class="mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-3">2. Задавайте качественные вопросы</h2>
                        <p class="text-gray-600 leading-relaxed">
                            Вопрос должен быть понятным, конкретным и не дублировать уже существующие темы. Постарайтесь описать контекст и указать, что вы уже попробовали.
                        </p>
                    </section>

                    <section class="mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-3">3. Ответы должны быть полезными</h2>
                        <p class="text-gray-600 leading-relaxed">
                            Не пишите просто "Да", "Нет" или комментарии без сути. Давайте развернутые, полезные ответы, которые действительно помогут.
                        </p>
                    </section>

                    <section class="mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-3">4. Анонимность допускается</h2>
                        <p class="text-gray-600 leading-relaxed">
                            Вы можете публиковать вопросы и ответы анонимно. Это не влияет на рейтинг и популярность ваших публикаций.
                        </p>
                    </section>

                    <section>
                        <h2 class="text-xl font-semibold text-gray-800 mb-3">5. Запрещено</h2>
                        <ul class="list-disc list-inside text-gray-600 space-y-2 pl-4">
                            <li>Публикация рекламы, спама и фишинга.</li>
                            <li>Оскорбления, ненормативная лексика, троллинг.</li>
                            <li>Продвижение запрещённого контента.</li>
                            <li>Злоупотребление капслоком и эмодзи.</li>
                        </ul>
                    </section>
                </div>
            </div>

            <!-- Left Sidebar - Top Questions -->
            {% include "partials/top_questions.html" %}

            <!-- Right Sidebar - Statistics -->
            {% include "partials/stats_sidebar.html" %}
        </div>
    </main>

    <!-- Footer -->
    {% include "partials/footer.html" %}
</body>
</html>
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
import uvicorn

from app.endpoints.endpoints import router
from app.database.init_database import init_db


logging.basicConfig(level=logging.INFO)


@asynccontextmanager
async def lifespan(app: FastAPI):
    logging.info("Starting up")
    await init_db()
    yield
    logging.info("Shutting down")


app = FastAPI(lifespan=lifespan)  # TODO: openapi_url=None docs_url=none redoc_url=none
app.mount("/app/static", StaticFiles(directory="app/static"), name="static")
app.include_router(router)


if __name__ == "__main__":
    uvicorn.run("main:app", reload=True, port=2000)
